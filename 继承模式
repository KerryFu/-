 /*
 * 1、原型链继承
 * 子类的原型等于父类的实例，问题是引用类型
 * 
 */ 
 function Parent(){
   this.colors = ['red','blue']
 }

 function Child(){}

 Child.prototype = new Parent();  //Child.prototype有了Parent的colors属性，且所有Child的实例都共享这个属性，现在instance1修改后，反映到instance2中

 var instance1 = new Child();
 var instance2 = new Child();
 instance1.colors.push('black');
 console.log(instance1.colors)   // ["red", "blue", "black"]
 console.log(instance2.colors)   // ["red", "blue", "black"]


// 2 构造函数式继承，解决原型中引用类型的问题
function Parent(){
   this.colors = ['red','blue'];
   this.sayHi = function(){
      
   }
}

function Child(){
   Parent.call(this)
}

var instance1 = new Child();
var instance2 = new Child();

instance1.colors.push('ye');
console.log(instance1.colors)   // ["red", "blue", "ye"]
console.log(instance2.colors)   // ["red", "blue"]
console.log(instance1.sayHi === instance2.sayHi) // false 写在Parent中的方法不能复用，2条作用域链（写在prototype上可以复用）


// 3 组合继承(原型链继承 + 构造函数式继承)
function Parent(name){
  this.name = name;
  this.colors = ['red']
}

 Parent.prototype.sayName = function(){
   console.log(this.name)
 }

function Child(name){
   // 继承属性
   Parent.call(this, name)
}

Child.prototype = new Parent();

var instance1 = new Child('jiang')
var instance2 = new Child('fu')
instance1.colors.push('tt');

console.log(instance1.colors)    // ["red", "tt"]
console.log(instance2.colors)    // ["red"]
console.log(instance1.sayName == instance2.sayName)  // true

// 4 原型式继承，基于原有的对象创建新对象（比如传进去的o）
function object(o){
  function F(){}
  F.prototype = o
  return new F()
}

var person = {
  name: 'jiang',
  friends: ['shelby', 'count']
}

// object对传入其中的对象执行了一次浅复制，相当于实现继承
var anotherPerson = object(person);
console.log(anotherPerson.friends)          // ["shelby", "count"]

/*
* 4-1 Object.create()规范了原型式继承，可接受2个参数，一个是用作新对象原型的对象
* 一个可选的为新对象定义时额外属性的对象 
*/ 
var person = {
  name: 'jiang',
  friends: ['shelby', 'count']
}

var anotherPerson = Object.create(person);
console.log(anotherPerson.friends)   // ["shelby", "count"]


/*
* 5 寄生式继承 -类似于寄生构造函数
* 即创建一个仅拥有封装继承过程的函数
*/ 
function createAnother(o){
  var clone = Object.create(o);  // 创建一个新对象
  clone.sayHi = function(){    // 添加方法 ，也可以绑到prototype上
    console.log('hi')
  }
  return clone
}

var person = {
  name: 'fu'
}
// 新对象不仅拥有了person的属性和方法，还有自己的sayHi方法
// 在主要考虑对象而不是自定义类型和构造函数的情况下，这是一个有用的模式
var anotherPerson = createAnother(person);
anotherPerson.sayHi();


//6  es6中的继承
class Super {}
class Sub extends Super {}

var sub = new Sub();
console.log(Sub.prototype.constructor === Sub);
console.log(sub.constructor === Sub);
console.log(sub.__proto__ === Sub.prototype);
console.log(Sub.__proto__ === Super);    // true 
console.log(Sub.prototype.__proto__ === Super.prototype);

// es5继承  子构造函数.prototype = new 父构造函数
// es6中    子类.__proto__ === 父类

